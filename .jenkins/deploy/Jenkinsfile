pipeline {
    agent none
    environment {
        GHCR_REGISTRY = 'ghcr.io' // GitHub Container Registry
        GHCR_USER = 'ASDFASDF' // This can technically be anything. The GitHub PAT is what actually authenticates to GHCR.
        // GHCR_REPOSITORY = 'your-github-username/your-image-name' # Actually, get this dynamically from Jenkins env vars
        GHCR_CREDENTIALS_ID = 'jenkins-github-ghcr-pat-token-andrewjdawes' // Jenkins Credentials ID for a GitHub PAT Token with read/write access to GHCR packages
    }
    stages {
        // Check out this way to detect if you are building a tag or not: https://www.youtube.com/watch?v=saiCjlJpfdA
        stage('Exit early') {
            agent any
            when {
                not {
                    anyOf {
                        buildingTag();
                        branch 'main';
                    }
                }
            }
            steps {
                script {
                    echo "Not building. Exiting pipeline with 'NOT_BUILT' status."
                    currentBuild.result = 'NOT_BUILT'
                    error("No changes detected; exiting pipeline.")
                    exit 1
                    return
                }
            }
        }
        stage('Define vars') {
            agent any
            steps {
                script {
                    def gitUrl = env.GIT_URL
                    def matcher = gitUrl =~ /https:\/\/github\.com\/([^\/]+)\/([^\/]+)\.git/
                    if (matcher.matches()) {
                        env.GITHUB_REPOSITORY_OWNER = matcher[0][1]
                        env.GITHUB_REPOSITORY_NAME = matcher[0][2]
                        echo "Owner: ${env.GITHUB_REPOSITORY_OWNER}, Repo: ${env.GITHUB_REPOSITORY_NAME}"
                    } else {
                        error "Failed to extract owner and repo from GIT_URL"
                    }
                    // When building the main branch, use the 'latest' tag
                    env.DYNAMIC_TAG_NAME = env.GIT_BRANCH == 'main' ? 'latest' : env.TAG_NAME
                    env.GHCR_REPOSITORY = "${env.GITHUB_REPOSITORY_OWNER}/${env.GITHUB_REPOSITORY_NAME}"
                }
            }
        }
        stage('Build and Push Images') {
            parallel {
                stage('Build for amd64') {
                    agent { label 'docker && amd64' }
                    steps {
                        script {
                            withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID,
                                                             variable: 'GHCR_PAT')]) {
                                sh '''
                                echo $GHCR_PAT | wc -m
                                echo "${GHCR_PAT}" | docker login "${GHCR_REGISTRY}" -u "${GHCR_USER}" --password-stdin
                                docker build --target base -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-amd64 .
                                docker push ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-amd64
                                '''
                            }
                        }
                    }
                }
                stage('Build for arm64') {
                    agent { label 'docker && arm64' }
                    steps {
                        script {
                            withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID,
                                                             variable: 'GHCR_PAT')]) {
                                sh '''
                                echo $GHCR_PAT | wc -m
                                echo "${GHCR_PAT}" | docker login "${GHCR_REGISTRY}" -u "${GHCR_USER}" --password-stdin
                                docker build --target base -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-arm64 .
                                docker push ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-arm64
                                '''
                            }
                        }
                    }
                }
            }
        }
        stage('Create and Push Manifest') {
            agent { label 'docker' } // Or use any node with Docker CLI
            steps {
                script {
                    withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID,
                                                        variable: 'GHCR_PAT')]) {
                        sh '''
                        echo "${GHCR_PAT}" | docker login ${GHCR_REGISTRY} -u "${GHCR_USER}" --password-stdin

                        docker manifest rm ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME} || true

                        docker manifest create ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME} \
                            ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-amd64 \
                            ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-arm64 --amend

                        docker manifest annotate ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME} \
                            ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-amd64 --os linux --arch amd64

                        docker manifest annotate ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME} \
                            ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-arm64 --os linux --arch arm64

                        # dump the manifest to see what it looks like
                        docker manifest inspect ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}

                        docker manifest push ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME} --purge
                        '''
                    }
                }
            }
        }
        stage('Deploy to Portainer') {
            when {
                branch 'main';
            }
            agent {
                docker {
                    alwaysPull true
                    registryUrl "https://ghcr.io"
                    // Has to be a Jenkins username/password credential - not just string. Otherwise, Jenkins will say it can't find the credential.
                    registryCredentialsId "jenkins-github-ghcr-pat-token-andrewjdawes-username-password"
                    image 'ghcr.io/codekaizen-github/codekaizen-website-wp-deploy:latest'
                }
            }
            steps {
                script {
                    withCredentials(bindings: [ \
                        sshUserPrivateKey( \
                            credentialsId: 'application-deployment-previously-authorized-private-key', \
                            keyFileVariable: 'JENKINS_CREDENTIAL_APPLICATION_DEPLOYMENT_PREVIOUSLY_AUTHORIZED_SSH_KEY_PRIVATE', \
                            // usernameVariable: 'JENKINS_CREDENTIAL_APPLICATION_DEPLOYMENT_PREVIOUSLY_AUTHORIZED_SSH_USERNAME' \
                        ), \
                        string(credentialsId: 'codekaizen-website-wordpress-mysql-root-password', variable: 'JENKINS_CREDENTIAL_CODEKAIZEN_WEBSITE_WORDPRESS_MYSQL_ROOT_PASSWORD'), \
                        string(credentialsId: 'codekaizen-website-wordpress-wordpress-db-name', variable: 'JENKINS_CREDENTIAL_CODEKAIZEN_WEBSITE_WORDPRESS_WORDPRESS_DB_NAME'), \
                        string(credentialsId: 'codekaizen-website-wordpress-wordpress-db-user', variable: 'JENKINS_CREDENTIAL_CODEKAIZEN_WEBSITE_WORDPRESS_WORDPRESS_DB_USER'), \
                        string(credentialsId: 'codekaizen-website-wordpress-wordpress-db-password', variable: 'JENKINS_CREDENTIAL_CODEKAIZEN_WEBSITE_WORDPRESS_WORDPRESS_DB_PASSWORD'), \
                        string(credentialsId: 'codekaizen-website-wordpress-wordpress-config-admin-user', variable: 'JENKINS_CREDENTIAL_CODEKAIZEN_WEBSITE_WORDPRESS_WORDPRESS_CONFIG_ADMIN_USER'), \
                        string(credentialsId: 'codekaizen-website-wordpress-wordpress-config-admin-email', variable: 'JENKINS_CREDENTIAL_CODEKAIZEN_WEBSITE_WORDPRESS_WORDPRESS_CONFIG_ADMIN_EMAIL'), \
                        string(credentialsId: 'codekaizen-website-wordpress-wordpress-config-admin-password', variable: 'JENKINS_CREDENTIAL_CODEKAIZEN_WEBSITE_WORDPRESS_WORDPRESS_CONFIG_ADMIN_PASSWORD') \
                    ]) {
                        sh '''
                        echo "Setting up SSH credentials inside Docker container..."
                        mkdir -p ~/.ssh
                        cp ${JENKINS_CREDENTIAL_APPLICATION_DEPLOYMENT_PREVIOUSLY_AUTHORIZED_SSH_KEY_PRIVATE} ~/.ssh/id_rsa
                        chmod 600 ~/.ssh/id_rsa

                        bash /workspace/entrypoint.sh
                        '''
                    }
                }
            }
        }
    }
}
